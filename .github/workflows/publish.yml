name: Publish

on:
  workflow_dispatch:
    inputs:
      publish_only:
        description: "Run publish-only (skip build/test/e2e). Useful for auth issues."
        required: false
        type: boolean
        default: false
      package:
        description: "Optional: publish only this package"
        required: false
        type: choice
        options:
          - all
          - core
          - tanstack-query
        default: all
  push:
    tags:
      - 'v*'

jobs:
  build:
    if: ${{ github.event_name != 'workflow_dispatch' || !inputs.publish_only }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: 'https://registry.npmjs.org'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm -w -s build

      - name: Lint
        run: pnpm -w -s lint

      - name: Test
        run: pnpm -w -s test

  e2e:
    if: ${{ github.event_name != 'workflow_dispatch' || !inputs.publish_only }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22


      - name: Install Docker Compose
        run: |
          # Docker Compose v2 is already installed on GitHub Actions runners
          # Just verify it's available
          docker compose version

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm -w -s build

      - name: E2E tests (core)
        run: pnpm -w -s test:e2e

  publish:
    if: ${{ github.event_name != 'workflow_dispatch' || !inputs.publish_only }}
    needs: e2e
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: 'https://registry.npmjs.org'
          cache: 'pnpm'

      - name: Ensure latest npm (for OIDC trusted publishing support)
        run: npm i -g npm@latest

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Publish packages
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          set -euo pipefail
          echo "Preparing to publish packages..."

          TOKEN_PRESENT=0
          if [ -n "${{ secrets.NPM_TOKEN }}" ]; then
            TOKEN_PRESENT=1
            export NODE_AUTH_TOKEN="${{ secrets.NPM_TOKEN }}"
          fi

          if [ "$TOKEN_PRESENT" -eq 1 ]; then
            echo "NPM_TOKEN detected: running npm whoami to verify auth..."
            npm whoami || { echo "npm auth failed. Ensure NPM_TOKEN has publish rights to @postgrestx."; exit 1; }
          else
            echo "No NPM_TOKEN provided. Will rely on npm OIDC Trusted Publishing for npm publish."
          fi

          # Build to ensure dist artifacts exist
          pnpm -w -s build

          # Publish each package via npm (supports OIDC). Skip if version already exists
          for PKG in packages/core packages/tanstack-query; do
            echo "\nPublishing $PKG..."
            cd "$PKG"
            NAME=$(node -p "require('./package.json').name")
            VERSION=$(node -p "require('./package.json').version")
            if npm view "$NAME@$VERSION" version >/dev/null 2>&1; then
              echo "Already published: $NAME@$VERSION — skipping."
              cd - >/dev/null
              continue
            fi
            echo "Publishing $NAME@$VERSION..."
            npm publish --access public --provenance || { echo "Failed to publish $NAME@$VERSION"; exit 1; }
            cd - >/dev/null
          done

      - name: Verify packages on npm
        run: |
          set -euo pipefail
          echo "Verifying @postgrestx/core and @postgrestx/tanstack-query are published..."
          tries=5
          for i in $(seq 1 $tries); do
            core_v=$(npm view @postgrestx/core version || true)
            tq_v=$(npm view @postgrestx/tanstack-query version || true)
            if [ -n "${core_v}" ] && [ -n "${tq_v}" ]; then
              echo "Published versions: core=${core_v}, tanstack-query=${tq_v}"
              exit 0
            fi
            echo "Not visible yet (attempt ${i}/${tries}). Waiting..."
            sleep 5
          done
          echo "Packages not visible on npm after verification attempts." >&2
          echo "If this persists, ensure NPM_TOKEN has publish rights to the @postgrestx org or configure Trusted Publishing." >&2
          exit 1

  # Direct publish-only job for manual dispatch when dealing with auth issues
  publish_direct:
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.publish_only }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: 'https://registry.npmjs.org'
          cache: 'pnpm'

      - name: Ensure latest npm (for OIDC trusted publishing support)
        run: npm i -g npm@latest

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Publish packages (dispatch)
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          set -euo pipefail
          echo "Preparing to publish packages (dispatch mode)..."

          TOKEN_PRESENT=0
          if [ -n "${{ secrets.NPM_TOKEN }}" ]; then
            TOKEN_PRESENT=1
            export NODE_AUTH_TOKEN="${{ secrets.NPM_TOKEN }}"
          fi

          if [ "$TOKEN_PRESENT" -eq 1 ]; then
            echo "NPM_TOKEN detected: running npm whoami to verify auth..."
            npm whoami || { echo "npm auth failed. Ensure NPM_TOKEN has publish rights to @postgrestx."; exit 1; }
          else
            echo "No NPM_TOKEN provided. Will rely on npm OIDC Trusted Publishing for npm publish."
          fi

          # Build to ensure dist artifacts exist
          pnpm -w -s build

          # Determine which packages to publish based on input
          declare -a PKGS
          case "${{ inputs.package }}" in
            core)
              PKGS=("packages/core")
              ;;
            tanstack-query)
              PKGS=("packages/tanstack-query")
              ;;
            all|"")
              PKGS=("packages/core" "packages/tanstack-query")
              ;;
            *)
              echo "Invalid package input: '${{ inputs.package }}'. Use 'all', 'core', or 'tanstack-query'." >&2
              exit 1
              ;;
          esac

          # Publish via npm (supports OIDC). Skip if version already exists
          for PKG in "${PKGS[@]}"; do
            echo "\nPublishing $PKG..."
            cd "$PKG"
            NAME=$(node -p "require('./package.json').name")
            VERSION=$(node -p "require('./package.json').version")
            if npm view "$NAME@$VERSION" version >/dev/null 2>&1; then
              echo "Already published: $NAME@$VERSION — skipping."
              cd - >/dev/null
              continue
            fi
            echo "Publishing $NAME@$VERSION..."
            npm publish --access public --provenance || { echo "Failed to publish $NAME@$VERSION"; exit 1; }
            cd - >/dev/null
          done

      - name: Verify packages on npm (dispatch)
        run: |
          set -euo pipefail
          echo "Verifying packages are published..."
          tries=5
          # Respect package selection for verification
          verify_pkg() {
            local pkg="$1"
            local v
            v=$(npm view "$pkg" version || true)
            if [ -n "$v" ]; then
              echo "Published version for $pkg: $v"
              return 0
            else
              return 1
            fi
          }

          for i in $(seq 1 $tries); do
            case "${{ inputs.package }}" in
              core)
                verify_pkg "@postgrestx/core" && exit 0
                ;;
              tanstack-query)
                verify_pkg "@postgrestx/tanstack-query" && exit 0
                ;;
              all|"")
                if verify_pkg "@postgrestx/core" && verify_pkg "@postgrestx/tanstack-query"; then
                  exit 0
                fi
                ;;
            esac
            echo "Not visible yet (attempt ${i}/${tries}). Waiting..."
            sleep 5
          done
          echo "Packages not visible on npm after verification attempts." >&2
          echo "If this persists, ensure NPM_TOKEN has publish rights to the @postgrestx org or configure Trusted Publishing." >&2
          exit 1
